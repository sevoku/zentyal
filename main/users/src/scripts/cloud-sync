#!/usr/bin/perl
# Copyright (C) 2012-2013 Zentyal S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use warnings;

use EBox;
use EBox::Config;
use EBox::Global;

use MIME::Base64;
use Error qw(:try);

use constant IGNORE => ['zentyal-cloud'];

EBox::init();

my $users = EBox::Global->modInstance('users');

if ($users->master() ne 'cloud') {
    exit 0;
}


# Update the ldap object if the attr changed
# return 1 if changed, 0 if not
sub setIfChanged
{
    my ($obj, $attr, $value, $lazy) = @_;

    return 0 if ($obj->get($attr) ~~ $value);

    $obj->set($attr, $value, $lazy);
    return 1;
}


# Cloud syncing enabled
EBox::debug("Syncing users with Zentyal Cloud!");

my $rs = EBox::Global->modInstance('remoteservices');
my $rest = $rs->REST();

EBox::debug("Asking for user list");
my $res = $rest->GET('/v1/users/users/');

# local and remote user list
my $lusers = $users->realUsers();
my $rusers = $res->data();

my $rusernames;

EBox::debug('Local users:  ' . @$lusers . ' users');
EBox::debug('Remote users: ' . @$rusers . ' users');

for my $ruser (@{$rusers}) {
    # add it to rusernames dict
    $rusernames->{$ruser->{name}} = 1;

    # Convert passwords
    my @pass = map { decode_base64($_) } @{$ruser->{passwords}};
    $ruser->{passwords} = \@pass;

    my $luser;
    try {
        my $changed = 0;

        $luser = $users->userByUID($ruser->{name});
        if ($luser) {
            $luser->setIgnoredSlaves(IGNORE);

            # User exists, update fields:
            $changed |= setIfChanged($luser, 'givenname', $ruser->{firstname}, 1);
            $changed |= setIfChanged($luser, 'sn', $ruser->{lastname}, 1);
            $changed |= setIfChanged($luser, 'cn', $ruser->{firstname} . ' ' . $ruser->{lastname}, 1);
            $changed |= setIfChanged($luser, 'gidNumber', $ruser->{gid}, 1);
            $changed |= setIfChanged($luser, 'uidNumber', $ruser->{uid}, 1);
            if ($ruser->{description}) {
                $changed |= setIfChanged($luser, 'description', $ruser->{description}, 1);
            } else {
                if ($luser->get('description')) {
                    $luser->delete('description', 1);
                    $changed = 1;
                }
            }

            # Update passwords
            my @passwords = $luser->get('krb5Key');
            unless (@{$ruser->{passwords}} ~~ @passwords) {
                $luser->setPasswordFromHashes($ruser->{passwords}, 1);
                $changed = 1;
            }

            $luser->save() if ($changed);

        } else {
            EBox::info('Local user "' . $ruser->{name} . '" does not exist, creating...');
            my %user;
            $user{uid}     = $ruser->{name};
            $user{name}    = $ruser->{firstname};
            $user{surname} = $ruser->{lastname};
            if ($user{name}) {
                $user{fullname} = $user{name} . ' ' . $user{surname};
                $user{givenname} = $user{name};
            } else {
                $user{fullname} = $user{surname};
                $user{givenname} = '';
            }
            $user{passwords} = $ruser->{passwords};
            $user{comment} = $ruser->{description};
            $user{isSystemUser} = 0;
            $user{ignoreSlaves} = IGNORE;
            $user{parent} = $users->objectFromDN($ruser->{ou} . ',' . $users->ldap->dn());

            EBox::Users::User->create(%user);
        }
    } otherwise {
        EBox::error('Failed to sync remote user ' . $ruser->{name});
    };
}


for my $user (@{$lusers}) {
    my $name = $user->name();
    if (not $rusernames->{$name}) {
        EBox::info("Local user $name not present in remote, removing...");
        $user->setIgnoredSlaves(IGNORE);
        $user->deleteObject();
    }
}


EBox::debug("Asking for group list");
$res = $rest->GET('/v1/users/groups/');

# local and remote user list
my $lgroups = $users->realGroups();
my $rgroups = $res->data();
my $rgroupnames;

EBox::debug('Local groups:  ' . @$lgroups . ' groups');
EBox::debug('Remote groups: ' . @$rgroups . ' groups');

for my $rgroup (@{$rgroups}) {
    # add it to rgroupames dict
    $rgroupnames->{$rgroup->{name}} = 1;

    my $lgroup;
    try {
        $lgroup = $users->groupByName($rgroup->{name});
        unless ($lgroup) {
            EBox::info('Local security group "' . $rgroup->{name} . '" does not exist, creating...');

            my %args = (
                name          => $rgroup->{name},
                description   => $rgroup->{description},
                gidNumber     => $rgroup->{gid},
                isSystemGroup => 0,
                ignoreSlaves  => IGNORE,
                parent        => $users->objectFromDN($rgroup->{ou} . ',' . $users->ldap->dn()),
            );

            $lgroup = EBox::Users::Group->create(%args);
        }

        # Update group info
        $lgroup->setIgnoredSlaves(IGNORE);
        my $changed = 0;

        $changed |= setIfChanged($lgroup, 'gidNumber', $rgroup->{gid}, 1);

        # Check members and resync if different:
        my @lmembers = map { $_->get('uid') } @{$lgroup->users()};
        unless (@{$rgroup->{members}} ~~ @lmembers) {
            $lgroup->removeAllMembers(1);
            $changed = 1;
            foreach my $user (@{$rgroup->{members}}) {
                $lgroup->addMember($users->userByUID($user), 1);
            }
        }
        $lgroup->save() if ($changed);
    } otherwise {
        EBox::error('Failed to sync remote group ' . $rgroup->{name});
    };
}


for my $group (@{$lgroups}) {
    my $name = $group->name();
    if (not $group->isSecurityGroup()) {
        EBox::info("Local distribution group $name not synced...");
    } elsif (not $rgroupnames->{$name}) {
        EBox::info("Local security group $name not present in remote, removing...");
        $group->setIgnoredSlaves(IGNORE);
        $group->deleteObject();
    }
}

EBox::info("Synchronization done");
1;
